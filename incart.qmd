---
title: Extract demographics and symptoms from Physionet Incart db
author: Paul Lemmens
format:
  html:
    toc: true
    toc-depth: 2
    theme: simplex
    fig-format: svg
    default-image-extension: svg
    dpi: 600
    fig-asp: 0.618
    fig-width: 8
    # fig-height: 9
    embed-resources: false
mainfont: Source Sans Pro
monofont: Source Code Pro
fontsize: 14pt
lightbox: auto
execute:
  echo: true
  message: false
  warning: false
---

```{r clear-workspace-and-prepare}
#| label: set up script
options(width=120)
require(tidyverse)
require(lemmens)
require(patchwork)
require(ggmosaic)
palette <- 'Dark2'
#palette <- 'Paired'
```

# Data processing 

Before running this script, make sure to download the Incart DB from Physionet and unzip the data file in your `~/tmp/incartdb/` directory so that this Quarto file can find the data for processing.

```{r}
#| label: load the data
data_location <- '~/tmp/incartdb/files/'
extension <- 'hea$'
header_files <- list.files(path = data_location, pattern = extension, full.names = TRUE)
head(header_files)
```

Only the header files in the full set of files are relevant because those contain the demographics and symptoms/diagnoses. With a dedicate parser, we can loop over the file(s) and extra the relevant pieces.

```{r}
#| label: define parser function
parse_hea <- function(f) {
  d <- readLines(f)
  search_pattern <- '#<age>:\\s[0-9]+\\s<sex>:\\s[MF]\\s(<diagnoses>\\s.+)?$'
  res <- grep(search_pattern, d, value = TRUE)

  return(res)
}
```

```{r}
#| label: parse header files
headers <- tibble(header_file = header_files) %>%
  mutate(id        = str_match(header_file, '(I[0-9]+)\\.hea$')[, 2],
         demog     = parse_hea(header_file),
         .by       = header_file) %>%
  mutate(age       = as.integer(str_match(demog, '#<age>:\\s+(?<age>[0-9][0-9])\\s+')[, 2]),
         gender    = str_match(demog, '\\s+<sex>:\\s+(?<gender>[MF])')[, 2],
         diagnoses = str_match(demog, '\\s+<diagnoses>\\s+(?<diagnoses>.+)$')[, 2],
         id        = as.integer(gsub('^I', '', id))) %>%
  select(-demog)
knitr::kable(headers, digits = 1)
```

```{r}
#| label: calculate age bins
breaks <- c(0, seq(20, max(headers$age) + 9, by = 10))
headers <- headers %>%
  mutate(age_bin = cut(age, breaks = breaks, right = TRUE))
```

```{r}
#| label: split diagnoses in rows
headers <- headers %>%
  separate_longer_delim(cols = diagnoses, delim = ',') %>%
  rename(diagnosis = diagnoses)
headers %>% head(10) %>% knitr::kable()
```

To calculate disparate impact and statistical parity (ignoring the point whether this makes sense), for the Python AIF360 package, we need to have both presence and absence of diagnoses for each patient. Do this in R as this is common idiom.

```{r}
#| label: set presence absence diagnosis
dat <- headers %>%
  mutate(presence = 1) %>% # Set presence so that pivot_wider fills in, filling in empty cells with
  pivot_wider(names_from = diagnosis, values_from = presence, values_fill = 0) %>% # absence as 0.
  pivot_longer(cols = -c(header_file, id, age, gender, age_bin), names_to = 'diagnosis',
               values_to = 'present') %>%
  filter(diagnosis != 'NA') %>%
  mutate(diagnosis = trimws(diagnosis))
dat %>% head(10) %>% knitr::kable()
```


# Overview of data

Some simple plots and overviews show that there is not full, complete coverage. Unfortunately, with the few data fields available, calculating bias statistics may be difficult.

```{r}
#| label: male female balance
headers %>%
  distinct(id, gender) %>%
  count(gender) %>%
  mutate(percentage = n / sum(n) * 100) %>%
  knitr::kable(digits = 1)
```


```{r}
#| label: age_histogram
p1 <- headers %>%
  distinct(id, gender, age) %>%
  ggplot(mapping = aes(x = age, fill = gender, colour = gender)) +
    geom_histogram(binwidth = 1) +
    lemmens::theme_lemmens + lemmens_brewer()
p2 <- p1 + facet_wrap(~ gender)
p1 + p2
```

```{r}
#| label: age_bins
headers %>% distinct(id, age_bin) %>% count(age_bin) %>% knitr::kable()
```

```{r}
#| label: diagnosis-per-gender
#| fig-format: png
#| layout-ncol: 2
headers %>%
  count(gender, diagnosis) %>%
  filter(!is.na(diagnosis)) %>%
  ggplot() +
    geom_mosaic(mapping = aes(x = product(gender, diagnosis), fill = gender)) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Mosaic Plot of Gender and Diagnosis")
headers %>%
  count(gender, diagnosis) %>%
  ggplot(mapping = aes(x = diagnosis, y = gender, fill = n)) +
    geom_tile() +
    scale_fill_gradient(low = "white", high = "steelblue") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Heatmap of Diagnosis by Gender", x = "Diagnosis", y = "Gender")
```

```{r}
#| label: diagnosis-per-age-bin
#| fig-format: png
headers %>%
  count(age_bin, diagnosis) %>%
  ggplot(mapping = aes(x = diagnosis, y = age_bin, fill = n)) +
    geom_tile() +
    scale_fill_gradient(low = "white", high = "steelblue") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Heatmap of Diagnosis by Gender", x = "Diagnosis", y = "Age bin")
```


Finally, save the processed data to disk so that they can be loaded in a Jupyter notebook that we need to use the Aequitas facilities.

```{r}
#| label: save to disk
readr::write_csv(dat, file = 'incartdb_demographics.csv')
```
